<!-- dashboard/views/index.ejs -->
<%- include('partials/header', { title: 'Omnia Bot - The All-in-One Discord Solution' }) %>
<%- include('partials/navbar', { user: user, activeTab: 'home' }) %>

<%- include('partials/alert', { message: message, messageType: messageType }) %>

<!-- Rate Limit Warning -->
<% if (typeof query !== 'undefined' && query.error === 'rate_limit') { %>
    <div class="container mt-3">
        <div class="alert alert-warning alert-dismissible fade show">
            <i class="bi bi-clock"></i> 
            <strong>Rate Limited:</strong> Too many login attempts. Please wait 10-15 minutes before trying to login again.
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    </div>
<% } %>

<!-- Hero Section -->
<section class="hero-section text-center">
    <div class="container">
        <h1 class="display-3 fw-bold mb-4">
            <i class="bi bi-infinity"></i> Omnia Bot
        </h1>
        <p class="lead mb-4">The all-in-one Discord bot that does everything. Moderation, Music, Fun, and more!</p>
        <p class="mb-4 text-white-50">Omnia - Latin for "everything" - Your complete Discord solution</p>
        
        <!-- Real-time status indicator -->
        <div class="mb-4">
            <span class="badge bg-success fs-6 pulse-badge" id="statusBadge">
                <i class="bi bi-circle-fill"></i> Checking Status...
            </span>
        </div>
        
        <div class="d-flex justify-content-center gap-3 flex-wrap">
            <a href="<%= botInviteURL %>" class="btn btn-light btn-lg">
                <i class="bi bi-plus-circle"></i> Add Omnia to Server
            </a>
            <% if (user) { %>
                <a href="/dashboard" class="btn btn-outline-light btn-lg">
                    <i class="bi bi-speedometer2"></i> Open Dashboard
                </a>
            <% } else { %>
                <% if (typeof query === 'undefined' || query.error !== 'rate_limit') { %>
                    <a href="/auth/discord" class="btn btn-outline-light btn-lg">
                        <i class="bi bi-discord"></i> Login to Configure
                    </a>
                <% } else { %>
                    <button class="btn btn-outline-light btn-lg" disabled>
                        <i class="bi bi-clock"></i> Login Temporarily Disabled
                    </button>
                <% } %>
            <% } %>
        </div>
    </div>
</section>

<!-- Real-time Stats Section -->
<section class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center mb-5">Live Statistics</h2>
        <div class="row text-center" id="statsContainer">
            <!-- Loading state -->
            <div class="col-12">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading stats...</span>
                </div>
                <p class="mt-3 text-muted">Loading real-time statistics...</p>
            </div>
        </div>
    </div>
</section>

<!-- Features Section -->
<section id="features" class="py-5">
    <div class="container">
        <h2 class="text-center mb-5">Why Choose Omnia?</h2>
        <div class="row g-4">
            <% 
            const features = [
                { icon: 'bi-shield-check', color: 'primary', title: 'Advanced Moderation', desc: 'Auto-mod, warning system, raid protection, and comprehensive logging.' },
                { icon: 'bi-music-note-beamed', color: 'success', title: 'Premium Music', desc: 'Crystal clear audio from YouTube, Spotify, SoundCloud and more.' },
                { icon: 'bi-emoji-smile', color: 'warning', title: 'Entertainment', desc: 'Games, memes, fun commands, and interactive features.' },
                { icon: 'bi-gear-fill', color: 'info', title: 'Fully Customizable', desc: 'Configure everything through our intuitive web dashboard.' },
                { icon: 'bi-lightning-charge', color: 'danger', title: 'Lightning Fast', desc: 'Optimized performance with ultra-low response times.' },
                { icon: 'bi-graph-up', color: 'purple', title: 'Analytics', desc: 'Detailed server statistics and member insights.' }
            ];
            %>
            <% features.forEach(feature => { %>
                <div class="col-md-4">
                    <div class="card feature-card h-100">
                        <div class="card-body text-center">
                            <i class="bi <%= feature.icon %> text-<%= feature.color %> fs-1 mb-3"></i>
                            <h5 class="card-title"><%= feature.title %></h5>
                            <p class="card-text"><%= feature.desc %></p>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>
</section>

<!-- Commands Preview Section -->
<section class="py-5 bg-primary text-white">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h2 class="mb-4">Powerful Commands</h2>
                <p class="lead mb-4">Over <span id="commandCount" class="fw-bold">-</span> slash commands to enhance your Discord experience.</p>
                <div class="row" id="commandCategories">
                    <!-- Will be loaded dynamically -->
                </div>
                <a href="/commands-list" class="btn btn-light btn-lg mt-3">
                    <i class="bi bi-terminal"></i> View All Commands
                </a>
            </div>
            <div class="col-lg-6">
                <div class="card bg-dark text-light">
                    <div class="card-body">
                        <h6 class="card-title">Most Popular Commands</h6>
                        <div class="list-group list-group-flush" id="popularCommands">
                            <!-- Will be loaded dynamically -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
.pulse-badge {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.stat-card {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.stat-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}

.stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #5865F2, #00D4AA);
}

.stat-number {
    font-size: 3rem;
    font-weight: 800;
    background: linear-gradient(45deg, #5865F2, #00D4AA);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0;
    line-height: 1;
}

.stat-label {
    color: #666;
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-top: 0.5rem;
}

.uptime-bar {
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-top: 1rem;
}

.uptime-fill {
    height: 100%;
    background: linear-gradient(90deg, #28a745, #20c997);
    border-radius: 4px;
    transition: width 1s ease;
}

.command-category-badge {
    background: rgba(255,255,255,0.2);
    border: 1px solid rgba(255,255,255,0.3);
    backdrop-filter: blur(10px);
}

.feature-card {
    border: none;
    transition: all 0.3s ease;
    border-radius: 15px;
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
}
</style>

<script>
class LiveStats {
    constructor() {
        this.init();
        this.startAutoRefresh();
    }

    async init() {
        await this.loadStats();
        await this.loadCommands();
    }

    async loadStats() {
        try {
            const response = await fetch('/api/bot/stats');
            const stats = await response.json();
            
            this.renderStats(stats);
            this.updateStatus(true);
        } catch (error) {
            console.error('Error loading stats:', error);
            this.renderErrorStats();
            this.updateStatus(false);
        }
    }

    async loadCommands() {
        try {
            const response = await fetch('/api/bot/commands');
            const commands = await response.json();
            
            this.renderCommandInfo(commands);
        } catch (error) {
            console.error('Error loading commands:', error);
        }
    }

    renderStats(stats) {
        const formatNumber = (num) => {
            if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
            if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
            return num.toString();
        };

        const formatUptime = (seconds) => {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            if (days > 0) return `${days}d ${hours}h`;
            if (hours > 0) return `${hours}h ${Math.floor((seconds % 3600) / 60)}m`;
            return `${Math.floor(seconds / 60)}m`;
        };

        const uptimePercentage = Math.min(99.9, (stats.uptime / (30 * 24 * 3600)) * 100);

        const statsHTML = `
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="stat-card text-center">
                    <div class="stat-number" data-count="${stats.guilds || 0}">${formatNumber(stats.guilds || 0)}</div>
                    <div class="stat-label">Active Servers</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="stat-card text-center">
                    <div class="stat-number" data-count="${stats.users || 0}">${formatNumber(stats.users || 0)}</div>
                    <div class="stat-label">Total Users</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="stat-card text-center">
                    <div class="stat-number">${uptimePercentage.toFixed(1)}%</div>
                    <div class="stat-label">Uptime</div>
                    <div class="uptime-bar">
                        <div class="uptime-fill" style="width: ${uptimePercentage}%"></div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="stat-card text-center">
                    <div class="stat-number">${formatUptime(stats.uptime || 0)}</div>
                    <div class="stat-label">Online</div>
                </div>
            </div>
        `;

        document.getElementById('statsContainer').innerHTML = statsHTML;
        this.animateNumbers();
    }

    renderCommandInfo(commands) {
        document.getElementById('commandCount').textContent = commands.length;

        // Group commands by category
        const categories = {};
        commands.forEach(cmd => {
            const category = cmd.category || 'Other';
            if (!categories[category]) categories[category] = 0;
            categories[category]++;
        });

        // Render category badges
        const categoryHTML = Object.entries(categories)
            .slice(0, 4)
            .map(([category, count]) => `
                <div class="col-6 mb-2">
                    <span class="badge command-category-badge">
                        ${category}: ${count}
                    </span>
                </div>
            `).join('');

        document.getElementById('commandCategories').innerHTML = categoryHTML;

        // Render popular commands (just show some examples)
        const popularHTML = commands.slice(0, 5).map(cmd => `
            <div class="list-group-item bg-transparent border-0 text-light px-0">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <code>/${cmd.name}</code>
                        <small class="d-block text-muted">${cmd.description}</small>
                    </div>
                    <span class="badge bg-primary">${cmd.category}</span>
                </div>
            </div>
        `).join('');

        document.getElementById('popularCommands').innerHTML = popularHTML;
    }

    renderErrorStats() {
        const errorHTML = `
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i>
                    Unable to load real-time statistics. The bot might be offline.
                </div>
            </div>
        `;
        document.getElementById('statsContainer').innerHTML = errorHTML;
    }

    updateStatus(isOnline) {
        const statusBadge = document.getElementById('statusBadge');
        if (isOnline) {
            statusBadge.className = 'badge bg-success fs-6 pulse-badge';
            statusBadge.innerHTML = '<i class="bi bi-circle-fill"></i> Bot Online';
        } else {
            statusBadge.className = 'badge bg-danger fs-6';
            statusBadge.innerHTML = '<i class="bi bi-circle-fill"></i> Bot Offline';
        }
    }

    animateNumbers() {
        const numbers = document.querySelectorAll('[data-count]');
        numbers.forEach(num => {
            const target = parseInt(num.dataset.count);
            const duration = 2000;
            const start = 0;
            const increment = target / (duration / 16);
            let current = start;

            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                
                const formatted = current >= 1000000 ? (current / 1000000).toFixed(1) + 'M' :
                                 current >= 1000 ? (current / 1000).toFixed(1) + 'K' :
                                 Math.floor(current).toString();
                                 
                num.textContent = formatted;
            }, 16);
        });
    }

    startAutoRefresh() {
        // Refresh stats every 30 seconds
        setInterval(() => {
            this.loadStats();
        }, 30000);
    }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
    new LiveStats();
});
</script>

<%- include('partials/footer', { botInviteURL: botInviteURL }) %>