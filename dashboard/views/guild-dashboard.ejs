<!-- dashboard/views/guild-dashboard.ejs - UNIFIED VERSION -->
<%- include('partials/header', { 
    title: guild.name + ' - ' + (section ? section.charAt(0).toUpperCase() + section.slice(1) : 'Dashboard')
}) %>

<%- include('partials/navbar', { user: user, activeTab: 'dashboard', fluid: true }) %>

<div class="container-fluid">
    <div class="row">
        <%- include('partials/guild-sidebar', { 
            guild: guild, 
            activeSection: section || 'general'
        }) %>
        
        <!-- Main content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">
                    <% if (section) { %>
                        <%= section.charAt(0).toUpperCase() + section.slice(1).replace('_', ' ') %> Settings
                    <% } else { %>
                        Server Overview
                    <% } %>
                </h1>
                <p class="text-muted">
                    <% if (section) { %>
                        Configure <%= section %> settings for <strong><%= guild.name %></strong>
                    <% } else { %>
                        Manage <strong><%= guild.name %></strong> with Omnia Bot
                    <% } %>
                </p>
            </div>

            <!-- Alert container -->
            <div id="alertContainer"></div>

            <!-- Dynamic content based on section -->
            <% if (!section || section === 'general' || section === 'overview') { %>
                <%- include('sections/general', { guild: guild, config: config }) %>
            <% } else { %>
                <% try { %>
                    <%- include('sections/' + section, { 
                        guild: guild, 
                        config: config, 
                        commands: typeof commands !== 'undefined' ? commands : []
                    }) %>
                <% } catch(e) { %>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i> 
                        Section "<%= section %>" not found or under construction
                    </div>
                <% } %>
            <% } %>
        </main>
    </div>
</div>

<!-- Unified JavaScript -->
<script>
const guildId = '<%= guild.id %>';
const currentSection = '<%= section || "general" %>';

// Global functions for all sections
class GuildDashboard {
    constructor() {
        this.init();
    }

    async init() {
        // Load data based on section
        if (['welcome', 'moderation', 'logs'].includes(currentSection)) {
            await this.loadChannels();
        }
        if (['autorole'].includes(currentSection)) {
            await this.loadRoles();
            await this.loadChannels();
        }
        if (currentSection === 'custom') {
            await this.loadCustomCommands();
        }
        
        this.setupEventListeners();
    }

    async loadChannels() {
        try {
            const response = await fetch(`/api/guild/${guildId}/channels`);
            const channels = await response.json();
            
            document.querySelectorAll('.channel-select').forEach(select => {
                const currentValue = select.value || select.dataset.current;
                select.innerHTML = '<option value="">Disabled</option>';
                
                // Group by category
                const categories = {};
                channels.forEach(channel => {
                    const category = channel.parent || 'No Category';
                    if (!categories[category]) categories[category] = [];
                    categories[category].push(channel);
                });
                
                Object.keys(categories).forEach(category => {
                    const optgroup = document.createElement('optgroup');
                    optgroup.label = category;
                    
                    categories[category].forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.id;
                        option.textContent = `# ${channel.name}`;
                        optgroup.appendChild(option);
                    });
                    
                    select.appendChild(optgroup);
                });
                
                if (currentValue) select.value = currentValue;
            });
            
            // Set current values from config
            this.setCurrentValues();
        } catch (error) {
            console.error('Error loading channels:', error);
        }
    }

    async loadRoles() {
        try {
            const response = await fetch(`/api/guild/${guildId}/roles`);
            const roles = await response.json();
            
            document.querySelectorAll('.role-select').forEach(select => {
                const currentValue = select.value || select.dataset.current;
                select.innerHTML = '<option value="">Disabled</option>';
                
                roles.forEach(role => {
                    const option = document.createElement('option');
                    option.value = role.id;
                    option.textContent = role.name;
                    option.style.color = role.color;
                    select.appendChild(option);
                });
                
                if (currentValue) select.value = currentValue;
            });
            
            this.setCurrentValues();
        } catch (error) {
            console.error('Error loading roles:', error);
        }
    }

    setCurrentValues() {
        // Set values from server config
        const configMap = {
            'welcomeChannel': '<%= config.welcomeChannel || "" %>',
            'modLogChannel': '<%= config.modLogChannel || "" %>',
            'autoRole': '<%= config.autoRole || "" %>'
        };
        
        Object.entries(configMap).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element && value) element.value = value;
        });
    }

    async loadCustomCommands() {
        try {
            const response = await fetch(`/api/guild/${guildId}/custom-commands`);
            const commands = await response.json();
            
            const tbody = document.getElementById('customCommandsList');
            if (!tbody) return;
            
            if (commands.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No custom commands yet</td></tr>';
            } else {
                tbody.innerHTML = commands.map(command => `
                    <tr>
                        <td><code>${command.command_name}</code></td>
                        <td>${command.response}</td>
                        <td>${command.created_by}</td>
                        <td>
                            <button class="btn btn-sm btn-danger" onclick="dashboard.deleteCustomCommand('${command.command_name}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');
            }
        } catch (error) {
            console.error('Error loading custom commands:', error);
        }
    }

    setupEventListeners() {
        // Form submissions
        document.querySelectorAll('form[data-config-form]').forEach(form => {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveConfig(form.id);
            });
        });

        // Command search and filters
        if (currentSection === 'commands') {
            this.setupCommandInterface();
        }
    }

    setupCommandInterface() {
        const searchInput = document.getElementById('commandSearch');
        const categoryButtons = document.querySelectorAll('[data-category]');
        const commandItems = document.querySelectorAll('.command-item');
        
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                commandItems.forEach(item => {
                    const name = item.dataset.name.toLowerCase();
                    const description = item.querySelector('.text-muted').textContent.toLowerCase();
                    item.style.display = (name.includes(searchTerm) || description.includes(searchTerm)) ? 'block' : 'none';
                });
            });
        }

        categoryButtons.forEach(button => {
            button.addEventListener('click', () => {
                categoryButtons.forEach(b => b.classList.remove('active'));
                button.classList.add('active');
                
                const category = button.dataset.category;
                commandItems.forEach(item => {
                    item.style.display = (category === 'all' || item.dataset.category === category) ? 'block' : 'none';
                });
            });
        });
    }

    async saveConfig(formId) {
        const form = document.getElementById(formId);
        const formData = new FormData(form);
        const config = {};
        
        formData.forEach((value, key) => {
            config[key] = form.elements[key].type === 'checkbox' ? form.elements[key].checked : value;
        });
        
        // Add unchecked checkboxes
        form.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            if (!config.hasOwnProperty(checkbox.name)) {
                config[checkbox.name] = false;
            }
        });
        
        try {
            const response = await fetch(`/api/guild/${guildId}/config`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(config)
            });

            const result = await response.json();
            
            if (result.success) {
                this.showAlert('success', result.message || 'Settings saved successfully!');
            } else {
                this.showAlert('danger', result.error || 'Failed to save settings');
            }
        } catch (error) {
            console.error('Save error:', error);
            this.showAlert('danger', 'An error occurred while saving settings');
        }
    }

    showAlert(type, message) {
        const alertContainer = document.getElementById('alertContainer');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        alertContainer.appendChild(alert);
        
        setTimeout(() => alert.remove(), 5000);
    }

    // Custom commands methods
    async addCustomCommand() {
        const name = document.getElementById('customCommandName').value;
        const response = document.getElementById('customCommandResponse').value;
        
        if (!name || !response) {
            this.showAlert('warning', 'Please fill in all fields');
            return;
        }
        
        try {
            const result = await fetch(`/api/guild/${guildId}/custom-commands`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ commandName: name, response: response })
            });
            
            const data = await result.json();
            
            if (data.success) {
                this.showAlert('success', 'Custom command added successfully!');
                document.getElementById('addCustomCommandForm').reset();
                bootstrap.Modal.getInstance(document.getElementById('addCustomCommandModal')).hide();
                this.loadCustomCommands();
            } else {
                this.showAlert('danger', data.error || 'Failed to add custom command');
            }
        } catch (error) {
            console.error('Error adding custom command:', error);
            this.showAlert('danger', 'Failed to add custom command');
        }
    }

    async deleteCustomCommand(commandName) {
        if (!confirm(`Are you sure you want to delete the command "${commandName}"?`)) return;
        
        try {
            const response = await fetch(`/api/guild/${guildId}/custom-commands/${commandName}`, {
                method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showAlert('success', 'Custom command deleted successfully!');
                this.loadCustomCommands();
            } else {
                this.showAlert('danger', 'Failed to delete custom command');
            }
        } catch (error) {
            console.error('Error deleting custom command:', error);
            this.showAlert('danger', 'Failed to delete custom command');
        }
    }
}

// Initialize dashboard
const dashboard = new GuildDashboard();

// Global functions for backward compatibility
window.addCustomCommand = () => dashboard.addCustomCommand();
window.deleteCustomCommand = (name) => dashboard.deleteCustomCommand(name);
</script>

<%- include('partials/footer') %>