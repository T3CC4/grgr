<%- include('partials/header', { 
    title: guild.name + ' - Dashboard',
    styles: '<style>.sidebar { min-height: calc(100vh - 56px); background: #f8f9fa; } .guild-icon-large { width: 80px; height: 80px; border-radius: 50%; }</style>'
}) %>

<%- include('partials/navbar', { user: user, activeTab: 'dashboard', fluid: true }) %>

<div class="container-fluid">
    <div class="row">
        <%- include('partials/guild-sidebar', { 
            guild: guild, 
            activeSection: typeof activeSection !== 'undefined' ? activeSection : 'general' 
        }) %>
        
        <!-- Main content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Server Configuration</h1>
                <p class="text-muted">Configure the bot for <strong><%= guild.name %></strong></p>
            </div>

            <!-- Alert for save status -->
            <div id="alertContainer"></div>

            <!-- Dynamic content based on section -->
            <% if (typeof section !== 'undefined') { %>
                <%- include('sections/' + section, { guild: guild, config: config, commands: commands }) %>
            <% } else { %>
                <%- include('sections/general', { guild: guild, config: config }) %>
            <% } %>
        </main>
    </div>
</div>

<%- include('partials/footer', {
    scripts: `
    <script>
        const guildId = '${guild.id}';
        
        // Load channels and roles on page load
        async function loadChannels() {
            try {
                const response = await fetch(\`/api/guild/\${guildId}/channels\`);
                const channels = await response.json();
                
                const selects = document.querySelectorAll('.channel-select');
                selects.forEach(select => {
                    select.innerHTML = '<option value="">Disabled</option>';
                    channels.forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.id;
                        option.textContent = \`# \${channel.name}\`;
                        if (channel.parent) option.textContent += \` (\${channel.parent})\`;
                        select.appendChild(option);
                    });
                });
                
                // Set current values
                if (document.getElementById('welcomeChannel')) {
                    document.getElementById('welcomeChannel').value = '${config.welcomeChannel || ""}';
                }
                if (document.getElementById('modLogChannel')) {
                    document.getElementById('modLogChannel').value = '${config.modLogChannel || ""}';
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        async function loadRoles() {
            try {
                const response = await fetch(\`/api/guild/\${guildId}/roles\`);
                const roles = await response.json();
                
                const selects = document.querySelectorAll('.role-select');
                selects.forEach(select => {
                    select.innerHTML = '<option value="">Disabled</option>';
                    roles.forEach(role => {
                        const option = document.createElement('option');
                        option.value = role.id;
                        option.textContent = role.name;
                        option.style.color = role.color;
                        select.appendChild(option);
                    });
                });
                
                // Set current value
                if (document.getElementById('autoRole')) {
                    document.getElementById('autoRole').value = '${config.autoRole || ""}';
                }
            } catch (error) {
                console.error('Error loading roles:', error);
            }
        }

        // Save configuration
        async function saveConfig(formId) {
            const form = document.getElementById(formId);
            const formData = new FormData(form);
            const config = {};
            
            formData.forEach((value, key) => {
                if (form.elements[key].type === 'checkbox') {
                    config[key] = form.elements[key].checked;
                } else {
                    config[key] = value;
                }
            });
            
            try {
                const response = await fetch(\`/api/guild/\${guildId}/config\`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(config)
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert('success', result.message);
                } else {
                    showAlert('danger', result.error || 'Error saving configuration');
                }
            } catch (error) {
                showAlert('danger', 'Error saving configuration');
                console.error('Save error:', error);
            }
        }

        function showAlert(type, message) {
            const alertContainer = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = \`alert alert-\${type} alert-dismissible fade show\`;
            alert.innerHTML = \`
                \${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            \`;
            alertContainer.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }

        // Attach save handlers to forms
        document.querySelectorAll('form[data-config-form]').forEach(form => {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                saveConfig(form.id);
            });
        });

        // Load data on page load
        loadChannels();
        loadRoles();
    </script>
    `
}) %>