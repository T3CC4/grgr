<!-- dashboard/views/guild-dashboard-section.ejs - NEW view for guild sections -->
<%- include('partials/header', { 
    title: guild.name + ' - ' + section.charAt(0).toUpperCase() + section.slice(1),
    styles: '<style>.sidebar { min-height: calc(100vh - 56px); background: #f8f9fa; } .guild-icon-large { width: 80px; height: 80px; border-radius: 50%; }</style>'
}) %>

<%- include('partials/navbar', { user: user, activeTab: 'dashboard', fluid: true }) %>

<div class="container-fluid">
    <div class="row">
        <%- include('partials/guild-sidebar', { 
            guild: guild, 
            activeSection: section
        }) %>
        
        <!-- Main content -->
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">
                    <%= section.charAt(0).toUpperCase() + section.slice(1).replace('_', ' ') %> Settings
                </h1>
                <p class="text-muted">Configure <%= section %> settings for <strong><%= guild.name %></strong></p>
            </div>

            <!-- Alert for save status -->
            <div id="alertContainer"></div>

            <!-- Include the appropriate section -->
            <% if (section === 'general' || section === 'overview') { %>
                <%- include('sections/general', { guild: guild, config: config }) %>
            <% } else if (section === 'welcome') { %>
                <%- include('sections/welcome', { guild: guild, config: config }) %>
            <% } else if (section === 'moderation') { %>
                <%- include('sections/moderation', { guild: guild, config: config }) %>
            <% } else if (section === 'autorole') { %>
                <%- include('sections/autorole', { guild: guild, config: config }) %>
            <% } else if (section === 'commands') { %>
                <%- include('sections/commands', { guild: guild, config: config, commands: commands }) %>
            <% } else if (section === 'custom') { %>
                <%- include('sections/custom', { guild: guild, config: config }) %>
            <% } else if (section === 'logs') { %>
                <%- include('sections/logs', { guild: guild, config: config }) %>
            <% } else { %>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle"></i> Section not found or under construction
                </div>
            <% } %>
        </main>
    </div>
</div>

<script>
const guildId = '<%= guild.id %>';
const currentSection = '<%= section %>';

// Load channels and roles on page load
async function loadChannels() {
    try {
        const response = await fetch(`/api/guild/${guildId}/channels`);
        const channels = await response.json();
        
        const selects = document.querySelectorAll('.channel-select');
        selects.forEach(select => {
            const currentValue = select.value || select.dataset.current;
            select.innerHTML = '<option value="">Disabled</option>';
            
            // Group channels by category
            const categories = {};
            channels.forEach(channel => {
                const category = channel.parent || 'No Category';
                if (!categories[category]) categories[category] = [];
                categories[category].push(channel);
            });
            
            // Add channels to select
            Object.keys(categories).forEach(category => {
                const optgroup = document.createElement('optgroup');
                optgroup.label = category;
                
                categories[category].forEach(channel => {
                    const option = document.createElement('option');
                    option.value = channel.id;
                    option.textContent = `# ${channel.name}`;
                    optgroup.appendChild(option);
                });
                
                select.appendChild(optgroup);
            });
            
            // Restore value
            if (currentValue) {
                select.value = currentValue;
            }
        });
        
        // Set current values from config
        if (document.getElementById('welcomeChannel')) {
            document.getElementById('welcomeChannel').value = '<%= config.welcomeChannel || "" %>';
        }
        if (document.getElementById('modLogChannel')) {
            document.getElementById('modLogChannel').value = '<%= config.modLogChannel || "" %>';
        }
    } catch (error) {
        console.error('Error loading channels:', error);
    }
}

async function loadRoles() {
    try {
        const response = await fetch(`/api/guild/${guildId}/roles`);
        const roles = await response.json();
        
        const selects = document.querySelectorAll('.role-select');
        selects.forEach(select => {
            const currentValue = select.value || select.dataset.current;
            select.innerHTML = '<option value="">Disabled</option>';
            
            roles.forEach(role => {
                const option = document.createElement('option');
                option.value = role.id;
                option.textContent = role.name;
                option.style.color = role.color;
                select.appendChild(option);
            });
            
            // Restore value
            if (currentValue) {
                select.value = currentValue;
            }
        });
        
        // Set current value from config
        if (document.getElementById('autoRole')) {
            document.getElementById('autoRole').value = '<%= config.autoRole || "" %>';
        }
    } catch (error) {
        console.error('Error loading roles:', error);
    }
}

// Save configuration
async function saveConfig(formId) {
    const form = document.getElementById(formId);
    const formData = new FormData(form);
    const config = {};
    
    // Process form data
    formData.forEach((value, key) => {
        // Handle checkboxes
        if (form.elements[key].type === 'checkbox') {
            config[key] = form.elements[key].checked;
        } else {
            config[key] = value;
        }
    });
    
    // Add unchecked checkboxes
    form.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (!config.hasOwnProperty(checkbox.name)) {
            config[checkbox.name] = false;
        }
    });
    
    try {
        const response = await fetch(`/api/guild/${guildId}/config`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(config)
        });

        const result = await response.json();
        
        if (result.success) {
            showAlert('success', result.message || 'Settings saved successfully!');
        } else {
            showAlert('danger', result.error || 'Failed to save settings');
        }
    } catch (error) {
        console.error('Save error:', error);
        showAlert('danger', 'An error occurred while saving settings');
    }
}

function showAlert(type, message) {
    const alertContainer = document.getElementById('alertContainer');
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    alertContainer.appendChild(alert);
    
    setTimeout(() => {
        alert.remove();
    }, 5000);
}

// Attach save handlers to forms
document.querySelectorAll('form[data-config-form]').forEach(form => {
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        saveConfig(form.id);
    });
});

// Load data on page load
if (currentSection === 'welcome' || currentSection === 'moderation') {
    loadChannels();
}
if (currentSection === 'autorole') {
    loadRoles();
    loadChannels();
}
</script>

<%- include('partials/footer') %>